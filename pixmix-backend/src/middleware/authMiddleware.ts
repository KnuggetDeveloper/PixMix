// pixmix-backend/src/middleware/authMiddleware.ts
import { Request, Response, NextFunction } from "express";
import fetch from "node-fetch";

// Extend Express Request type
declare global {
  namespace Express {
    interface Request {
      user?: any;
    }
  }
}

// Debug logging
const DEBUG = true;

// API key for internal service communication
const INTERNAL_API_KEY = process.env.INTERNAL_API_KEY || "default-key";

/**
 * Middleware to verify Cloud Run access tokens
 * This validates tokens generated by the gcloud-authentication service
 */
export async function verifyCloudRunToken(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    if (DEBUG) console.log("[Auth Middleware] Validating Cloud Run token...");

    // Get token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      if (DEBUG) console.log("[Auth Middleware] Missing or invalid authorization header");
      res.status(401).json({
        error: "Authentication required",
        message: "Missing or invalid authorization header",
      });
      return;
    }

    // Extract token
    const token = authHeader.substring(7);
    
    // In production with Cloud Run, we can trust the token if it came through
    // the Cloud Run ingress. For additional security, we validate with Google's 
    // tokeninfo endpoint.
    if (process.env.NODE_ENV === "production") {
      // Cloud Run handles authentication at the ingress level
      // We can validate the token format and expiry
      if (DEBUG) console.log("[Auth Middleware] Cloud Run production mode - token accepted");
      req.user = { validated: true };
      next();
      return;
    }
    
    // In development, validate token with Google's tokeninfo endpoint
    if (DEBUG) console.log("[Auth Middleware] Validating token with Google...");
    const tokenInfo = await validateAccessToken(token);
    
    if (DEBUG) console.log("[Auth Middleware] Token validated successfully");
    
    // Add validated token information to request
    req.user = tokenInfo;
    next();
  } catch (error) {
    console.error("[Auth Middleware] Token validation error:", error);
    res.status(403).json({
      error: "Authentication failed",
      message: "Invalid or expired token",
    });
  }
}

/**
 * Validates a Google Cloud access token
 */
async function validateAccessToken(token: string): Promise<any> {
  try {
    const response = await fetch(
      `https://oauth2.googleapis.com/tokeninfo?access_token=${token}`,
      {
        method: "GET",
        headers: {
          "Accept": "application/json",
        },
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("[Auth Middleware] Token validation failed:", errorText);
      throw new Error(`Invalid token: ${errorText}`);
    }

    const tokenInfo = await response.json();
    
    if (DEBUG) {
      console.log("[Auth Middleware] Token info:", {
        email: tokenInfo.email,
        scope: tokenInfo.scope,
        expires_in: tokenInfo.expires_in,
      });
    }
    
    // Basic validation
    if (!tokenInfo.expires_in || tokenInfo.expires_in <= 0) {
      throw new Error("Token is expired");
    }

    return tokenInfo;
  } catch (error) {
    console.error("[Auth Middleware] Error validating token:", error);
    throw error;
  }
}

/**
 * Middleware for API key authentication (internal services)
 */
export async function verifyApiKey(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const apiKey = req.headers["x-api-key"];
  
  if (apiKey !== INTERNAL_API_KEY) {
    res.status(401).json({
      error: "Authentication required",
      message: "Invalid or missing API key",
    });
    return;
  }
  
  req.user = { apiKey: true };
  next();
}

/**
 * Optional middleware for endpoints that don't require authentication
 */
export async function optionalAuth(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const authHeader = req.headers.authorization;
  
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    // No token provided - continue without auth
    if (DEBUG) console.log("[Auth Middleware] No auth token provided (optional)");
    next();
    return;
  }

  // Try to validate the token
  try {
    const token = authHeader.substring(7);
    const tokenInfo = await validateAccessToken(token);
    req.user = tokenInfo;
    if (DEBUG) console.log("[Auth Middleware] Optional auth validated");
  } catch (error) {
    // Token validation failed - continue without auth
    if (DEBUG) console.log("[Auth Middleware] Optional auth failed, continuing without");
  }
  
  next();
}